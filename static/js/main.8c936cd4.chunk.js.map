{"version":3,"sources":["components/Movie/no-image.jpg","components/SearchBar/SearchBar.js","components/Movie/Movie.js","components/SearchResults/SearchResults.js","util/IMDB/IMDB.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","props","state","term","search","bind","handleTermChange","handleEnterKeyUp","this","onSearch","event","setState","target","value","keyCode","className","type","placeholder","onChange","onKeyUp","onClick","React","Component","Movie","src","posterUrl","noImage","alt","title","year","SearchResults","sortType","handleSelectChange","sortBy","searchResults","map","movie","url","IMDB","fetch","then","response","json","jsonresponse","Search","Title","Number","Year","Poster","Type","App","results","sort","a","b","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c936cd4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-image.44a4dbce.jpg\";","import React from 'react';\nimport './SearchBar.css';\n\n\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { term: \"\" };\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleEnterKeyUp = this.handleEnterKeyUp.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({ term: event.target.value });\n    }\n\n    handleEnterKeyUp(event) {\n        if (event.keyCode === 13) {\n            this.search();\n        }\n    }\n\n    render() {\n        return (\n            <main>\n                <h1>MovieSearcher</h1>\n                <div className=\"SearchBox\">\n                    <input type=\"text\" className=\"SearchBox-input\" placeholder=\"search here\" onChange={this.handleTermChange} onKeyUp={this.handleEnterKeyUp}></input>\n\n                    <button className=\"SearchBox-button\" onClick={this.search}>\n                        <i className=\"SearchBox-icon  material-icons\" >search</i>\n                    </button>\n                </div>\n            </main>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Movie.css';\nimport noImage from \"./no-image.jpg\";\n\nclass Movie extends React.Component {\n    render() {\n        return (\n            <div className=\"img-box\">\n                <img src={this.props.posterUrl === \"noImage\"? noImage : this.props.posterUrl} alt=\"\" />\n                <div className=\"transparent-box\">\n                    <div className=\"caption\">\n                        <p>{this.props.title}</p>\n                        <p className=\"opacity-low\">{this.props.year} {this.props.type}</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Movie;","import React from 'react';\nimport './SearchResults.css';\nimport Movie from '../Movie/Movie';\n\nclass SearchResults extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { sortType: \"\" };\n\n        this.handleSelectChange = this.handleSelectChange.bind(this);\n    }\n\n    handleSelectChange(event) {\n        const sortType = event.target.value;\n        this.props.sortBy(sortType);\n    }\n\n    render() {\n        return (\n            <div>\n                <p className=\"heading\">Search Results</p>\n                <div className=\"select\">\n                    <select className=\"option\" onChange={this.handleSelectChange}>\n                        <option value=\"\">Sort by</option>\n                        <option value=\"yearUp\">Year(ascending)</option>\n                        <option value=\"yearDown\">Year(descending)</option>\n                    </select>\n                </div>\n                <div className=\"gallery-image\">\n                    {\n                        this.props.searchResults.map(movie => {\n                            return <Movie title={movie.title} year={movie.year} posterUrl={movie.posterUrl} type={movie.type}/>\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchResults;","const apikey = \"4a3b711b\";\nconst url = `http://www.omdbapi.com/?apikey=${apikey}&`;\n\nconst IMDB = {\n    search(term) {\n        return fetch(url + \"s=\" + term\n        ).then(response => { return response.json() }\n        ).then(jsonresponse => {\n            if (jsonresponse.Search) {\n                return jsonresponse.Search.map(movie => (\n                    {\n                        title: movie.Title,\n                        year: Number(movie.Year),\n                        posterUrl: movie.Poster === \"N/A\" ?  \"noImage\" : movie.Poster,\n                        type: movie.Type\n                    }))\n            \n            } else {return [];}\n    })\n}\n};\n\nexport default IMDB;","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport IMDB from '../../util/IMDB/IMDB';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: []\n    }\n\n    this.search = this.search.bind(this);\n    this.sortBy = this.sortBy.bind(this);\n  }\n\n  search(term) {\n    IMDB.search(term).then(\n      (response) => { this.setState({ searchResults: response }) }\n    );\n  }\n\n  sortBy(sortType) {\n    if (sortType === \"yearDown\" && this.state.searchResults) {\n      const results = this.state.searchResults.sort(function (a, b) {\n        return b.year - a.year;\n      });\n      this.setState({ searchResults: results });\n    } else if (sortType === \"yearUp\" && this.state.searchResults) {\n      const results = this.state.searchResults.sort(function (a, b) {\n        return a.year - b.year;\n      });\n      this.setState({ searchResults: results });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} sortBy={this.sortBy} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}